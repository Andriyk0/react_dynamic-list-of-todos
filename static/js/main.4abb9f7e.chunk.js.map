{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","selectUserId","useState","todos","setTodos","query","setQuery","optionValue","setOptionValue","useEffect","fetch","then","response","json","element","filterTodos","filter","todo","title","includes","className","type","id","name","placeholder","value","onChange","event","target","disabled","completed","map","checked","readOnly","onClick","userId","CurrentUser","setSelectedUserId","user","setUser","getUsers","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4abb9f7e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getTodos } from '../../api/api';\nimport './TodoList.scss';\n\ninterface Prop {\n  selectUserId: React.Dispatch<React.SetStateAction<number>>\n}\n\nexport const TodoList: React.FC<Prop> = ({ selectUserId }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [optionValue, setOptionValue] = useState(' ');\n\n  useEffect(() => {\n    getTodos()\n      .then((element) => setTodos(element));\n  }, []);\n\n  const filterTodos = todos.filter(todo => todo.title.includes(query));\n\n  const selectTodos = () => {\n    let rezult;\n\n    if (optionValue === 'active') {\n      rezult = filterTodos.filter(todo => todo.completed === false);\n    } else if (optionValue === 'completed') {\n      rezult = filterTodos.filter(todo => todo.completed === true);\n    } else {\n      rezult = filterTodos;\n    }\n\n    return rezult;\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        id=\"search-query\"\n        name=\"query\"\n        className=\"input\"\n        placeholder=\"Type search word\"\n        value={query}\n        onChange={(event) => (\n          setQuery(event.target.value)\n        )}\n      />\n      <select\n        value={optionValue}\n        onChange={(event) => {\n          setOptionValue(event.target.value);\n        }}\n      >\n        <option disabled value={' '}>Choose option</option>\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n\n      </select>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {selectTodos().map(todo => (\n            !todo.completed\n              ? (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                    type=\"button\"\n                    onClick={() => selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n              : (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--checked\"\n                >\n                  <label>\n                    <input type=\"checkbox\" checked readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nconst API_URL_USERS = 'https://mate.academy/students-api/users';\nconst API_URL_TODOS = 'https://mate.academy/students-api/todos';\n\nexport function getUsers(userId:number) {\n  return fetch(`${API_URL_USERS}/${userId}`)\n    .then(response => response.json());\n}\n\nexport function getTodos() {\n  return fetch(API_URL_TODOS)\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Prop {\n  userId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n}\n\nexport const CurrentUser: React.FC<Prop> = ({ userId, setSelectedUserId }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUsers(userId)\n      .then(element => setUser(element));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button--selected button\"\n        onClick={() => setSelectedUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList selectUserId={setSelectedUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}